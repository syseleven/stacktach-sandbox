## TODO convert to tmux
#hardstatus alwayslastline '%{= .} %-Lw%{= .}%> %n%f %t*%{= .}%+Lw%< %-=%{g}(%{d}%H/%l%{g})'
# Enable this if you're replaying old events ...
#screen -t time_sync bash
#stuff "cd git/stacktach-notigen/bin; gunicorn -b 127.0.0.1:8001 --log-file=- 'time_sync:get_api()'\r"
##

# the shells in tmux won't become children of the calling build.sh process (and thus won't receive its virtualenv)
#   if there is another tmux session (and thus a singleton tmux server) already running. That's why we activate the
#   virtualenv in each tmux shell separately

new-session -s tach -n quincy bash
send-keys ". .venv/bin/activate && cd git/stacktach-quincy/quincy && gunicorn --log-file=- 'quincy.api:get_api(config_location=\"../../../quincy.conf\")' ; cd -\r"

new-window -n bash bash
send-keys ". .venv/bin/activate && klugman http://127.0.0.1:8000 streams\r"

new-window -n yagi1 bash
send-keys ". .venv/bin/activate && yagi-event --config yagi.conf\r"

new-window -n yagi2 bash
send-keys ". .venv/bin/activate && yagi-event --config yagi.conf\r"

new-window -n pipeline1 bash
send-keys ". .venv/bin/activate && pipeline_worker -c winchester.yaml\r"

new-window -n pipeline2 bash
send-keys ". .venv/bin/activate && pipeline_worker -c winchester.yaml\r"

new-window -n gen bash
send-keys "#. .venv/bin/activate && cd git/stacktach-notigen/bin && python event_pump.py ../templates 2 0 ; cd -\r"

attach-session
